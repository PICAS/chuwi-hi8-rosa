Some 64 bit Intel processors run 32 bit EFI.
Choose correct bitness via efi/fw_platform_size
while installing GRUB bootloader.

Signed-off-by: Sergei A. Trusov <sergei.a.trusov@ya.ru>
---
v2: Added bitness check for the SecureBoot enabled case
v3: Added the above to grub-install as well
---
--- org/usr/sbin/grub2-efi-install	2016-07-09 00:41:09.000000000 +1000
+++ new/usr/sbin/grub2-efi-install	2017-10-12 19:31:36.226000180 +1000
@@ -293,7 +293,10 @@
 			modprobe -q efivars 2>/dev/null || true ;;
 		esac
 		if [ -d /sys/firmware/efi ]; then
-		    target="x86_64-efi"
+		    case `cat /sys/firmware/efi/fw_platform_size` in
+			32) target="i386-efi";;
+			*)  target="x86_64-efi";;
+		    esac
 		else
 		    target=i386-pc
 		fi
@@ -309,7 +312,10 @@
 			modprobe -q efivars 2>/dev/null || true ;;
 		esac
 		if [ -d /sys/firmware/efi ]; then
-		    target="i386-efi"
+		    case `cat /sys/firmware/efi/fw_platform_size` in
+			32) target="i386-efi";;
+			*)  target="x86_64-efi";;
+		    esac
 		elif [ -e /proc/device-tree ]; then
 		    target=i386-pc
 		    for x in /proc/device-tree/*; do
@@ -822,7 +822,10 @@
     echo 1>&2
 elif [ x"$grub_modinfo_platform" = xefi ]; then
     # Using pre-built and signed grub binary to support booting with SecureBoot enabled
-    cp "${efidir}/grub2-efi/grub.efi" "${efidir}/${efi_file}"
+    case `cat /sys/firmware/efi/fw_platform_size` in
+	32) cp "${efidir}/grub2-efi32/grub.efi" "${efidir}/${efi_file}";;
+	*)  cp "${efidir}/grub2-efi/grub.efi" "${efidir}/${efi_file}";;
+    esac
     # For old macs. Suggested by Peter Jones.
     if [ x$grub_modinfo_target_cpu = xi386 ]; then
 	cp "${grubdir}/${grub_modinfo_target_cpu}-$grub_modinfo_platform/core.${imgext}" "${efidir}/boot.efi"
@@ -863,9 +863,12 @@
 	if test -z "$efidir_drive" || test -z "$efidir_disk"; then
 	    gettext_printf "Can't find GRUB drive for %s; unable to create EFI Boot Manager entry.\n" "$efidir" >&2
 	else
-	    if ls /sys/firmware/efi/vars/SecureBoot* /boot/efi/EFI/$efi_distributor/BOOTx64.efi >/dev/null 2>&1 ; then
+	    if ls /sys/firmware/efi/vars/SecureBoot* /boot/efi/EFI/$efi_distributor/BOOT*.efi >/dev/null 2>&1 ; then
 		# SecureBoot can be turned on, and shim is present - using shim as bootloader.
-		efi_file_boot=BOOTx64.efi
+		case `cat /sys/firmware/efi/fw_platform_size` in
+			32) efi_file_boot=BOOTIA32.efi;;
+			*)  efi_file_boot=BOOTx64.efi;;
+		esac
 	    else
 		# If no shim is present, usign grub2 directly.
 		# If shim is present, but no SecureBoot detected, also using grub2 to avoid "insecure boot" warnings.
--- org/usr/sbin/grub2-install	2016-07-09 00:42:02.000000000 +1000
+++ new/usr/sbin/grub2-install	2017-10-12 19:28:45.245367409 +1000
@@ -293,7 +293,10 @@
 			modprobe -q efivars 2>/dev/null || true ;;
 		esac
 		if [ -d /sys/firmware/efi ]; then
-		    target="x86_64-efi"
+		    case `cat /sys/firmware/efi/fw_platform_size` in
+			32) target="i386-efi";;
+			*)  target="x86_64-efi";;
+		    esac
 		else
 		    target=i386-pc
 		fi
@@ -309,7 +312,10 @@
 			modprobe -q efivars 2>/dev/null || true ;;
 		esac
 		if [ -d /sys/firmware/efi ]; then
-		    target="i386-efi"
+		    case `cat /sys/firmware/efi/fw_platform_size` in
+			32) target="i386-efi";;
+			*)  target="x86_64-efi";;
+		    esac
 		elif [ -e /proc/device-tree ]; then
 		    target=i386-pc
 		    for x in /proc/device-tree/*; do
@@ -822,7 +822,10 @@
     echo 1>&2
 elif [ x"$grub_modinfo_platform" = xefi ]; then
     # Using pre-built and signed grub binary to support booting with SecureBoot enabled
-    cp "${efidir}/grub2-efi/grub.efi" "${efidir}/${efi_file}"
+    case `cat /sys/firmware/efi/fw_platform_size` in
+	32) cp "${efidir}/grub2-efi32/grub.efi" "${efidir}/${efi_file}";;
+	*)  cp "${efidir}/grub2-efi/grub.efi" "${efidir}/${efi_file}";;
+    esac
     # For old macs. Suggested by Peter Jones.
     if [ x$grub_modinfo_target_cpu = xi386 ]; then
 	cp "${grubdir}/${grub_modinfo_target_cpu}-$grub_modinfo_platform/core.${imgext}" "${efidir}/boot.efi"
@@ -863,9 +863,12 @@
 	if test -z "$efidir_drive" || test -z "$efidir_disk"; then
 	    gettext_printf "Can't find GRUB drive for %s; unable to create EFI Boot Manager entry.\n" "$efidir" >&2
 	else
-	    if ls /sys/firmware/efi/vars/SecureBoot* /boot/efi/EFI/$efi_distributor/BOOTx64.efi >/dev/null 2>&1 ; then
+	    if ls /sys/firmware/efi/vars/SecureBoot* /boot/efi/EFI/$efi_distributor/BOOT*.efi >/dev/null 2>&1 ; then
 		# SecureBoot can be turned on, and shim is present - using shim as bootloader.
-		efi_file_boot=BOOTx64.efi
+		case `cat /sys/firmware/efi/fw_platform_size` in
+			32) efi_file_boot=BOOTIA32.efi;;
+			*)  efi_file_boot=BOOTx64.efi;;
+		esac
 	    else
 		# If no shim is present, usign grub2 directly.
 		# If shim is present, but no SecureBoot detected, also using grub2 to avoid "insecure boot" warnings.
